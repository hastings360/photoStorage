{"remainingRequest":"/Users/hastingsl/Documents/Web_Sites/photoStorage/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/hastingsl/Documents/Web_Sites/photoStorage/node_modules/rxjs/_esm2015/observable/UsingObservable.js","dependencies":[{"path":"/Users/hastingsl/Documents/Web_Sites/photoStorage/node_modules/rxjs/_esm2015/observable/UsingObservable.js","mtime":1531331966000},{"path":"/Users/hastingsl/Documents/Web_Sites/photoStorage/node_modules/cache-loader/dist/cjs.js","mtime":1531332486000},{"path":"/Users/hastingsl/Documents/Web_Sites/photoStorage/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Observable } from '../Observable';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable extends Observable {\n    constructor(resourceFactory, observableFactory) {\n        super();\n        this.resourceFactory = resourceFactory;\n        this.observableFactory = observableFactory;\n    }\n    static create(resourceFactory, observableFactory) {\n        return new UsingObservable(resourceFactory, observableFactory);\n    }\n    /** @deprecated internal use only */ _subscribe(subscriber) {\n        const { resourceFactory, observableFactory } = this;\n        let resource;\n        try {\n            resource = resourceFactory();\n            return new UsingSubscriber(subscriber, resource, observableFactory);\n        }\n        catch (err) {\n            subscriber.error(err);\n        }\n    }\n}\nclass UsingSubscriber extends OuterSubscriber {\n    constructor(destination, resource, observableFactory) {\n        super(destination);\n        this.resource = resource;\n        this.observableFactory = observableFactory;\n        destination.add(resource);\n        this.tryUse();\n    }\n    tryUse() {\n        try {\n            const source = this.observableFactory.call(this, this.resource);\n            if (source) {\n                this.add(subscribeToResult(this, source));\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    }\n}\n//# sourceMappingURL=UsingObservable.js.map",null]}